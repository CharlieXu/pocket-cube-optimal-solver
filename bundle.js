(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

//function PriorityQueue(maxPriority) {
//	if(maxPriority == null) maxPriority = 0;
//	var q = [];
//	for(var i=0; i<=maxPriority; i++) q.push([]);
//	
//	return {
//		push: function(val, priority) {
//			q[priority].push(val);
//		},
//		pop: function() {
//			for(var i=0; i<maxPriority; i++) {
//				if(q[i].length) return q[i].pop();
//			}
//			return null;
//		}
//	}
//}

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var PriorityQueue = function () {
	function PriorityQueue(maxPriority) {
		_classCallCheck(this, PriorityQueue);

		this.maxPriority = maxPriority || 0;
		this.q = [];
		for (var i = 0; i <= maxPriority; i++) {
			this.q.push([]);
		}
	}

	_createClass(PriorityQueue, [{
		key: "push",
		value: function push(val, priority) {
			this.q[priority].push(val);
		}
	}, {
		key: "pop",
		value: function pop() {
			for (var i = 0; i < this.maxPriority; i++) {
				if (this.q[i].length) return this.q[i].pop();
			}
			return null;
		}
	}]);

	return PriorityQueue;
}();

module.exports = PriorityQueue;

},{}],2:[function(require,module,exports){
'use strict';

var State = require('./state2');
var PriorityQueue = require('./priorityqueue');

function searchID(startNode) {
	// iterative deepening search
	for (var i = 8; i <= 8; i++) {
		var solution = searchDFS(startNode, 0, i);
		if (solution) return solution;
	}
	return null;
}

function searchDFS(node, depth, maxdepth) {
	if (isGoal(node)) return node;
	if (depth == maxdepth) return null;
	var successors = expand(node);
	for (var i = 0; i < successors.length; ++i) {
		var succ = successors[i];
		var f = depth + 1 + heuristics(succ);
		if (f <= maxdepth) {
			var res = searchDFS(succ, depth + 1, maxdepth);
			//if(res) return res;
		}
	}
	return null;
}

function searchAstar(node, depth, maxdepth) {
	var pq = new PriorityQueue(maxdepth);
	if (isGoal(node)) return node;
	if (depth == maxdepth) return null;
	var successors = expand(node);
	for (var i = 0; i < successors.length; ++i) {
		var succ = successors[i];
		var f = depth + 1 + heuristics(succ);
		if (f <= maxdepth) {
			var res = searchDFS(succ, depth + 1, maxdepth);
			//if(res) return res;
		}
	}
	return null;
}

function isGoal(state) {
	return state.isSolved();
}

function expand(state) {
	expanded++;
	var moves = [];
	var lastSide = state.lastMove && state.lastMove[0];
	switch (lastSide) {
		case 'U':
			moves = ['F1', 'F2', 'F3', 'R1', 'R2', 'R3'];break;
		case 'F':
			moves = ['U1', 'U2', 'U3', 'R1', 'R2', 'R3'];break;
		case 'R':
			moves = ['U1', 'U2', 'U3', 'F1', 'F2', 'F3'];break;
		default:
			moves = ['U1', 'U2', 'U3', 'F1', 'F2', 'F3', 'R1', 'R2', 'R3'];
	}
	return moves.map(function (x) {
		return state.move(x);
	});
}

function heuristics(state) {
	return 0;
}

function movesToString(state) {
	var moves = [];
	while (state.prevState) {
		moves.push(state.lastMove);
		state = state.prevState;
	}
	return moves.reverse();
}

function main() {
	var startState = new State().move('U1').move('F2').move('R1').move('F3').move('R2').move('U1').move('R3').move('U2').move('R1').move('F2');

	console.log('start state', startState);

	startState = startState.normalize().move('x2').move('x2');

	startState.prevState = null;
	startState.lastMove = null;

	console.log('normalized state', startState);

	console.time('search time');
	var solution = searchID(startState);
	console.timeEnd('search time');
	console.log('expanded', expanded);
	console.log('solution', solution);
	if (solution) console.log('steps', movesToString(solution));
}

var expanded = 0;
main();

},{"./priorityqueue":1,"./state2":3}],3:[function(require,module,exports){
'use strict';

function State(p, o, prevState, lastMove) {
	this.p = p || [0, 1, 2, 3, 4, 5, 6, 7]; // solved permutation
	this.o = o || [0, 0, 0, 0, 0, 0, 0, 0]; // solved orientation
	this.prevState = prevState || null;
	this.lastMove = lastMove || null;
}

/** Generates new State instance
*/
State.prototype.move = function (move) {
	var a, b;
	switch (move) {
		case 'U1':
			a = [2, 0, 3, 1, 4, 5, 6, 7];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'U2':
			a = [3, 2, 1, 0, 4, 5, 6, 7];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'U3':
			a = [1, 3, 0, 2, 4, 5, 6, 7];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'F1':
			a = [1, 5, 2, 3, 0, 4, 6, 7];b = [1, 2, 0, 0, 2, 1, 0, 0];break;
		case 'F2':
			a = [5, 4, 2, 3, 1, 0, 6, 7];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'F3':
			a = [4, 0, 2, 3, 5, 1, 6, 7];b = [1, 2, 0, 0, 2, 1, 0, 0];break;
		case 'R1':
			a = [4, 1, 0, 3, 6, 5, 2, 7];b = [2, 0, 1, 0, 1, 0, 2, 0];break;
		case 'R2':
			a = [6, 1, 4, 3, 2, 5, 0, 7];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'R3':
			a = [2, 1, 6, 3, 0, 5, 4, 7];b = [2, 0, 1, 0, 1, 0, 2, 0];break;
		case 'x1':
			a = [4, 5, 0, 1, 6, 7, 2, 3];b = [2, 1, 1, 2, 1, 2, 2, 1];break;
		case 'x2':
			a = [6, 7, 4, 5, 2, 3, 0, 1];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'x3':
			a = [2, 3, 6, 7, 0, 1, 4, 5];b = [2, 1, 1, 2, 1, 2, 2, 1];break;
		case 'y1':
			a = [2, 0, 3, 1, 6, 4, 7, 5];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'y2':
			a = [3, 2, 1, 0, 7, 6, 5, 4];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'y3':
			a = [1, 3, 0, 2, 5, 7, 4, 6];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'z1':
			a = [1, 5, 3, 7, 0, 4, 2, 6];b = [1, 2, 2, 1, 2, 1, 1, 2];break;
		case 'z2':
			a = [5, 4, 7, 6, 1, 0, 3, 2];b = [0, 0, 0, 0, 0, 0, 0, 0];break;
		case 'z3':
			a = [4, 0, 6, 2, 5, 1, 7, 3];b = [1, 2, 2, 1, 2, 1, 1, 2];break;
	}

	var p = [0, 0, 0, 0, 0, 0, 0, 0];
	var o = [0, 0, 0, 0, 0, 0, 0, 0];

	for (var i = 0; i < 8; ++i) {
		p[i] = this.p[a[i]];
		o[i] = (this.o[a[i]] + b[i]) % 3;
	}

	return new State(p, o, this, move);
};

State.prototype.toString = function () {
	return '[' + this.p + '] [' + this.o + ']';
};

// works only for normalized state
State.prototype.isSolved = function () {
	for (var i = 0; i < 8; i++) {
		if (this.p[i] != i || this.o[i]) return false;
	}return true;
};

/** Rotate cube so cubie 7 is in its right place and orientation.
    Returns newly generated state with move history.
*/
State.prototype.normalize = function () {
	if (this.p[7] == 7 && this.o[7] == 0) return this;
	var moves = ['x1', 'x2', 'x3', 'y1', 'y2', 'y3', 'z1', 'z2', 'z3'];
	for (var i = 0; i < moves.length; i++) {
		var move1 = moves[i];
		var s1 = this.generateNextState(move1);
		if (s1.p[7] == 7 && s1.o[7] == 0) return s1;
		for (var j = 0; j < moves.length; j++) {
			var move2 = moves[j];
			if (move2[0] == move1[0]) continue;
			var s2 = s1.generateNextState(move2);
			if (s2.p[7] == 7 && s2.o[7] == 0) return s2;
		}
	}
};

module.exports = State;

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
